1) WebDriver interface: invoking methods on a web browser
	From a WebDriver class we can create object which can control the functionality of the browser
	(for example: driver.get("http:/www.google.com");) --- driver = object
	
2) WebElement interface: invoking methods on a web application

WebDriver Methods:
1. get ().	
2. getCurrentUrl().	
3. getTitle().	
4. getPageSource().	
5. findElement().	
6. findElements().	
7. close().	
8. quit().	
9. getWindowHandle().	
10. getWindowHandles().	
11. switchTo().	
12. navigate().	
13. manage().

Web operations on web Elements:
1.click().
2.sendkeys().
3.clear().
4.getText().
5.getTagName().
6.getLocation().
7.isSelected().
8.isDisplayed().
9.isEnabled().
10.getAttribute() (i.e - getAttribute("value"))
11.getsize()
12.getsize().getwidth()
13.getsize().getheight()
14.getlocation()
15.getocation().getX()
16.getocation().getY()

-----------------------------------------------------------------------------------------------------------------

HTML Reminder:
<h1 class="foo">News</h1>
<> = opening tag
</> = closing tag
class="foo" = Attribute
News = content
-----------------------------------------------------------------------------------------------------------------
	
SYNTAX:	
1) driver.findElement(By.<Locator Type>(<Locator Value>));
2) findElement is a function that returns WebElement! (WebElement Test = driver.findElement(By.id("123"));)
3) findElement = return the FIRST element it finds
4) findElements = return the ALL the element it finds:
		List<WebElement> AllLinks = driver.findElements(By.TagName("a"));
		AllLinks.get(0);
-----------------------------------------------------------------------------------------------------------------

Priorities:
	id
	name --- <input name="register" class="required" type="text"/> --- driver.findElement(By.name("register"));
	css selector --- 
		<input key="123">...</input> --- driver.findElement(By.cssSelectoer("input[key='123']"));
		starting text --- <input key="Testing123">...</input> --- driver.findElement(By.cssSelectoer("input[key^='Test']"));
		ending text --- <input key="Testing123">...</input> --- driver.findElement(By.cssSelectoer("input[key$='123']"));
		text contained --- <input key="Testing123"> --- driver.findElement(By.cssSelectoer("input[key*='ng12']"));
		AND --- <input key="Testing123" type="Android">--- driver.findElement(By.cssSelectoer("input[key='123'][Type='Android']"));
		
	xpath --- 
		Absolute/Native = go from root --- /html/body/div/table/tr/td/span ---driver.findElement(By.xpath("/html/body/div/table/tr/td/span"));
		Relative = telling the path in between --- //table/tr/td/span 	
			based on index --- driver.findElement(By.xpath("//li[3]"));
			using ID attribute --- driver.findElement(By.xpath("//input[@id='Form1']"));
			using NAME attribute --- driver.findElement(By.xpath("//input[@name='age']"));
			using SIZE attribute --- driver.findElement(By.xpath("//input[@size='13']"));
			using * --- <input style="width:140px" name="age" type="text"> --- driver.findElement(By.xpath("//input[@*='age']"));
			using logical operators to filter elements (OR/AND):
				driver.findElement(By.xpath("//input[@id='Form1' or @name='age']"));
				driver.findElement(By.xpath("//input[@id='Form1' and @name='age']"));
			using start-with end-with: --- <input value="Login" id="btn123" type="submit"> --- 
				driver.findElement(By.xpath("//input[starts-with(@id,'btn')]"));
				driver.findElement(By.xpath("//input[starts-with(@id,'123')]"));
			using contains: --- <input value="Login" id="btn123" type="submit"> --- 
				driver.findElement(By.xpath("//input[contains(@id,'tn12')]"));
				OR
				driver.findElement(By.xpath("//*[contains(@id,'tn12')]"));
			using contains: --- <p>testing</p> --- 	
				driver.findElement(By.xpath("//p[text()='testing']"));
				OR
				driver.findElement(By.xpath("//*[text()='testing']"));
			MORE EXAMPLES: https://www.w3schools.com/xml/xpath_intro.asp
	linktext --- <a href="http:/yonniflenner.com">Download</a> --- driver.findElement(By.linktext("Download"));
	partial linktext  --- <a href="http:/yonniflenner.com">Download my files</a> --- driver.findElement(By.PartialLinkText("Download"));
	class name --- <input name="register" class="required" type="text"/> --- driver.findElement(By.className("required"));
	tag name --- <p>My Title</p> --- driver.findElement(By.TagName("p"));
-----------------------------------------------------------------------------------------------------------------
Controllers:
Located in the DOM and give us the ability to control some aspect in the web application (for example <button>)
List of controllers:
button  --- 
	1) <button id = "MyButton" value= "Click me">
	driver.findElement(By.id("MyButton")).click(); / webelement element = driver.findElement(By.name("register")); element.click();
	2) <input id = "MyButton" value = "Submit" />
	driver.findElement(By.id("MyButton")).submit();
WHAT IS THE DIFFERENCE? = submit() can submit on any element under Form tag (i,e: driver.findElement(By.id("MyText")).submit();)

link text --- <a href="http:/yonniflenner.com">Download</a> --- driver.findElement(By.linktext("Download")).click();
area text/text box --- <textarea rows="4" cols="50" id="MyText" >...</textarea> 
						driver.findElement(By.id("MyText")).sendKeys("Hello World");
						driver.findElement(By.id("MyText")).clear();
						
radio button --- <input type="radio" name="group1Milk" value="Milk'>Milk 
				 <input type="radio" name="group1Butter" value="Butter">Butter 
				 <input type="radio" name="group1Cheese" value="Cheese">Cheese
					driver.findElement(By.name("group1Cheese")).click();
					
checkbox --- <input type="checkbox" name="option1" value="Milk'>Milk 
			 <input type="checkbox" name="option2" value="Butter">Butter 
			 <input type="checkbox" name="option3" value="Cheese">Cheese
				driver.findElement(By.name("option1")).click();
				driver.findElement(By.name("option2")).click();
				 
drop down list/combo box --- here we need to use the Select class(included in selenium). there are few methods:
		<select id="myComboBox">
			<option value="Milk">MyMilk</option>
			<option value="Butter">MyButter</option>
			<option value="Cheese">MyCheese</option>
		</select>
		1)selectByVisibleText --- select MySelection = new Select(driver.findElement(By.id("myComboBox")));
								  MySelection.selectByVisibleText("MyCheese");
		2)selectByIndex--- select MySelection = new Select(driver.findElement(By.id("myComboBox")));
								  MySelection.selectByIndex("1");
		3)selectByValue--- select MySelection = new Select(driver.findElement(By.id("myComboBox")));
								  MySelection.selectByValue("Cheese");
		**Print all elements in the combo box:
		select MySelection = new Select(driver.findElement(By.id("myComboBox")));
		List<WebElement> MyComboList = MySelection.getOptions();
		int iListSize = MyComboList.size();
		for(int i=0; i<iListSize; i++)
		{
			String sValue=MyComboList.get(i).getText();
			System.out.println(sValue);
		}

date picker --- DatePicker is a table so navigate to each cell, check its value and select it:
				driver.findElement(By.id("datepicker")).click(); // click to open DatePicker controllers
				WebElement dateWidget = driver.findElement(By.id(ui-datepicker-div);
				List<WebElement> cells = dateWidget.findElements(By.tagName("td"));
				for (WebElement cell : cells)
				{
					if(cell.getText().equals("18"))
					{
						cell.click();
						break;
					}
				}
				
list
forms
web table
drag&drop element
double click element
right click element
mouse scroll
mouse hover
multiple selection

Upload files = OS Window is open (browse)
ONLY IF THE CONTROL BUTTON CONTAINS: <input type="file" id="myId" />:
	driver.findElement(By.id("myId")).sendKeys("C:\\myPhoto.jpg");
-----------------------------------------------------------------------------------------------------------------
Assertion:

verifications:
driver.findElement(By.id("TEST")).isDisplayed(); --- returns boolean
isEnabled();
isSelected();
getSize(); --- return a dimension object
getSize().getWidth(); --- dimensions (int)
getSize().getHeight(); --- dimensions (int)
getLocation(); --- return a point object
getLocation().getX(); --- (int)
getLocation().getY(); --- (int)
getTagName() --- (string)
getText();
getAttribute("value"); 

assertions:(JUNIT):
assertEquals(Expected, Actual)
assertEquals(Message, Expected, Actual)	
assertNotEquals(Expected, Actual)
assertNotEquals(Message, Expected, Actual)	
assertTrue(Condition)
assertTrue(Message, Condition)
assertFalse(Condition)
assertFalse(Message, Condition)
assertNull(WebElement)
assertNotNull(WebElement)
assertArrayEqauls(Type, Type)
Fail(Message)
	